/**
 * Screen image display
 *
 * The functions in this file must be implemented by the Alien application
 * before linking with the TGV library.
 *
 * @file
 * $Id: alien-screen.h,v 1.34 2009/09/04 08:20:14 roger Exp $
 */
/* Copyright (C) Picsel, 2004-2008. All Rights Reserved. */
/**
 * @defgroup TgvScreen Screen Display
 * @ingroup TgvSystem
 *
 * Output of display images generated by the Picsel library to the device's
 * physical screen.
 *
 * These functions also enable the Picsel library to obtain
 * information about the configuration of the screen, and
 * allow the Alien application to control the dimensions and orientation of
 * the screen available to the Picsel library.
 *
 * The principal purpose of the Picsel library is to render its output to the
 * screen. It calls AlienScreen_update() to achieve this.
 * AlienScreen_update() will be called whenever the contents of the screen
 * need to change, e.g., to show the next frame of an animation,
 * while a document is loading, in response to a user command or after
 * the screen has been resized.
 *
 * The Alien application must accurately report the screen dimensions
 * to the Picsel library to ensure that
 *  - the minimum amount of memory is used,
 *  - image processing algorithms, e.g. anti-aliasing, are applied correctly,
 *    and
 *  - the best use is made of the available screen for displaying the
 *    document.
 *
 * The Picsel library is designed to render to a buffer of exactly the same
 * pixel resolution as the physical screen. Since many applications draw
 * other information icons on screen, such as radio signal strength or
 * battery charge level, the Picsel library can be configured to render
 * meaningful data into a smaller area than the physical screen size; the
 * Picsel library will render nothing outside of this area. This
 * may help to streamline the implementation of AlienScreen_update().
 *
 * The Picsel library can also rotate the screen buffer between landscape
 * and portrait orientations itself, without changing the buffer format. If
 * the device has a hardware feature to accept both landscape and portrait
 * formats, then PicselScreen_physicalRotation() can be used, but this is
 *  a less common choice.
 *
 * @see @ref TgvRotating_And_Resizing
 *
 * @{
 */

#ifndef ALIEN_SCREEN_H
#define ALIEN_SCREEN_H

#include "alien-types.h"
#include "picsel-screen.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/** Byte alignment of the start buffer
  */
typedef enum BufferAlignment
{
    /** The buffer starts on the default byte-alignment of the compiler */
    BufferAlignmentDefault = (1<<16),
    /** The buffer starts on a 4-byte boundary */
    BufferAlignment4       = 4,
    /** The buffer starts on a 8-byte boundary*/
    BufferAlignment8       = 8,
    /** The buffer starts on a 16-byte boundary*/
    BufferAlignment16      = 16,
    /** The buffer starts on a 32-byte boundary */
    BufferAlignment32      = 32
}
BufferAlignment;


/**
 * Structure to fill in for screen configuration
 *
 * The Alien application should fill in the requested values with information
 * describing the screen available to the Picsel library.
 *
                                                                    @verbatim
                     <----- physicalScreenWidth ------>
               ^     O--------------------------------+
               |     |                                |
               |     |                                |
               |     |                                |   0 = (0, 0)
               |     |                                |   T = (xTopLeft,
               |     |   <--- picselScreenWidth -->   |         yTopLeft)
               |     |   T------------------------+   |   .. Area to be drawn
               |     |   |...^....................|   |   .. by the Picsel
               |     |   |...|....................|   |   .. library
               |     |   |...|....................|   |
               |     |   |...|....................|   |
               |     |   |...|....................|   |
physicalScreenHeight |   |.picselScreenHeight.....|   |
               |     |   |...|....................|   |
               |     |   |...|....................|   |
               |     |   |...|....................|   |
               |     |   |...v....................|   |
               |     |   +------------------------+   |
               |     |                                |
               |     |                                |
               v     +--------------------------------+         @endverbatim
 */
typedef struct AlienScreenConfiguration
{
    /** Describes the screen orientation (aspect ratio).
        Defaults to 1 if physicalScreenWidth > physicalScreenHeight */
    int                landscape;

    /** If the alien application is using less than the full screen then
        store the X co-ordinate of top left of the area the Picsel library
        should draw to. Assume that the origin (0,0) is at the top left of
        the physical screen and co-ordinates grow downwards and to the right.
        Defaults to 0. */
    int                xTopLeft;

    /** If the alien application is using less than the full screen then
        store the Y co-ordinate of top left of the area the Picsel library
        should draw to. Assume that the origin (0,0) is at the top left of
        the physical screen and co-ordinates grow downwards and to the right.
        Defaults to 0. */
    int                yTopLeft;

    /** Width, in pixels, of the area the Picsel library should draw to
        by default. */
    int                picselScreenWidth;

    /** Height, in pixels, of the area the Picsel library should draw to
        by default. */
    int                picselScreenHeight;

    /** Width, in pixels, of the physical display. */
    int                physicalScreenWidth;

    /** Height, in pixels, of the physical display. */
    int                physicalScreenHeight;

    /** For devices with a secondary display, e.g. television (TV) out, store
        the width of the alternative screen. To save memory, the image shown
        on the secondary display cannot be rotated.
        Defaults to 0. */
    int                maxNonRotateWidth;

    /**  For devices with a secondary display, e.g. television (TV) out, store
        the height of the alternative screen. To save memory, the image shown
        on the secondary display cannot be rotated.
        Defaults to 0. */
    int                maxNonRotateHeight;

    /** Must be set to point to @ref PicselScreenFormat_b5g6r5. If this format
        does not match the device's screen, use one of the
        @ref TgvConversionUtilities,
        e.g. Picsel_PixelBlock_convert_b5g6r5_b8g8r8() */
    PicselScreenFormat format;

    /** Specify alignment of the screen buffer.
        Defaults to @ref BufferAlignmentDefault. */
    BufferAlignment    alignment;

    /** Pixels per thousand inches of the display width.  May be used to
        determine optimal sizes for text and parameter settings for input.
        If the value is unknown, it should not be set. */
    unsigned int       pixelsPerThousandInchesWidth;

    /** Pixels per thousand inches of the display height.  May be used to
        determine optimal sizes for text and parameter settings for input.
        If the value is unknown, it should not be set. */
    unsigned int       pixelsPerThousandInchesHeight;
}
AlienScreenConfiguration;


/**
 * Update the device's screen.
 *
 * This function will be called by the Picsel library when the contents of
 * the screen have changed and must be copied to the device's screen by the
 * Alien application.
 * To allow the Alien application to optimise this process, the part of the
 * screen buffer that has changed may be specified.
 * Use of this information is optional - @c buffer always points to the
 * top-left corner of the entire screen image and the alien application may
 * safely copy the entire buffer.
 * The data in the buffer will be formatted according to the information
 * provided by the Alien application in AlienScreen_getConfiguration();
 *
 * All coordinates are specified relative to the top-left of the display.
 *
 * Note if the host has indicated it can support it, via
 * @ref PicselConfig_UpdateRotationCapable, then the buffer may need to
 * be rotated before being plotted. This will have been indicated via
 * an @ref AlienInformation_ChangeUpdateRotation event. Note the
 * coordinates passed to AlienScreen_update are always post rotation.
 *
 * AlienScreen_update() may be called at any time, and is typically
 * used for progressive updates while a document is being loaded. However,
 * in some states, updates are not made. These are:
 * - @ref AlienInformation_InitComplete has not yet been sent by the Picsel
 *   library.
 * - While hidden with PicselApp_hidden().
 * - While suspended with PicselApp_suspend().
 * - After @ref PicselUserRequest_Type_SearchNextPage while searching.
 * - When a simple document has been fully loaded, and the user is
 *   not interacting with it.
 *
 *
 *
 * @runtime  This function may be called several times per second, so it must
 *           update the device's screen and return to the Picsel library
 *           with a minimum of processing.
 *
 *
 * @post The device's LCD screen will display the contents of the buffer.
 *
 * @product Must be implemented to support every Picsel product.
 *
 *
 * @param[in] alienContext  See PicselApp_start()
 * @param[in] buffer        Buffer containing screen image.  The start of
 *                          this buffer will be byte-aligned according to
 *                          the value for @c alignment set by
 *                          AlienScreen_getConfiguration().
 * @param[in] format        Pixel-format of @c buffer.  This will be
 *                          @ref PicselScreenFormat_b5g6r5.
 *                          Picsel provides utility functions,
 *                          e.g. Picsel_PixelBlock_convert_b5g6r5_b8g8r8(),
 *                          to help with converting the data in @c buffer
 *                          where the device's pixel format does not match.
 *                          See @ref TgvConversionUtilities.
 * @param[in] width         Width of @c buffer in pixels.  If the Picsel
 *                          library has been configured to start in full
 *                          screen mode this will be @c physicalScreenWidth,
 *                          otherwise it will be @c picselScreenWidth, as set
 *                          by AlienScreen_getConfiguration(), or a
 *                          screen resize or rotation. See
 *                          @ref TgvRotating_And_Resizing.
 * @param[in] height        Height of @c buffer in pixels. If the Picsel
 *                          library has been configured to start in full
 *                          screen mode this will be @c physicalScreenHeight,
 *                          otherwise it will be @c picselScreenHeight, as
 *                          set by AlienScreen_getConfiguration(),  or a
 *                          screen resize or rotation. See
 *                          @ref TgvRotating_And_Resizing.
 * @param[in] widthBytes    Width of @c buffer in bytes.
 * @param[in] updateX       X offset into @c buffer of changed area, in
 *                          pixels.
 * @param[in] updateY       Y offset into @c buffer of changed area, in
 *                          pixels.
 * @param[in] updateWidth   Width of changed area in pixels.
 * @param[in] updateHeight  Height of changed area in pixels.
 * @param[in] xTopLeft      Typically 0. If the Picsel library is using less
 *                          than the full screen,
 *                          then @c xTopLeft is X co-ordinate of the top left
 *                          of the application's display area, in pixels.
 * @param[in] yTopLeft      Typically 0. If the Picsel library is using less
 *                          than the full screen, then @c yTopLeft is the
 *                          Y co-ordinate of the top left of the
 *                          application's display area, in pixels.
 *
 *
 *                                                                 @verbatim
  O-------------------------------------------------->
  |
  |        <-------------- width ---------------->
  |     ^  T-------------------------------------+
  |     |  |                                     |
  |     |  |                                     |   0 = (0,0)
  |     |  |                                     |   T = (xTopLeft, yTopLeft)
  |     |  |    <------- updateWidth ------->    |   U = (updateX, updateY)
  |     |  |    U---------------------------+    |   ... Area changed since
  |     |  |    |....^......................|    |   ... previous call to
  |     |  |    |....|......................|    |   ... AlienScreen_update
  |     |  |    |....|......................|    |
  |     |  |    |....|......................|    |
  | height |    |..updateHeight.............|    |
  |     |  |    |....|......................|    |
  |     |  |    |....|......................|    |
  |     |  |    |....|......................|    |
  |     |  |    |....v......................|    |
  |     |  |    +---------------------------+    |
  |     |  |                                     |
  |     |  |                                     |
  |     v  +-------------------------------------+
  V                                                         @endverbatim
 *
 */
void AlienScreen_update(Alien_Context      *alienContext,
                        void               *buffer,
                        PicselScreenFormat  format,
                        unsigned int        width,
                        unsigned int        height,
                        unsigned int        widthBytes,
                        unsigned int        updateX,
                        unsigned int        updateY,
                        unsigned int        updateWidth,
                        unsigned int        updateHeight,
                        unsigned int        xTopLeft,
                        unsigned int        yTopLeft);

/**
 * This function may be used to allow the Alien application to retain
 * control over the content of specified areas within the display area
 * allocated to the Picsel library.
 *
 * @param[in] alienContext  See PicselApp_start()
 * @param[in] buffer        Buffer containing screen image.  The start of
 *                          this buffer will be byte-aligned according to
 *                          the value for @c alignment set by
 *                          AlienScreen_getConfiguration().
 * @param[in] format        Pixel-format of @c buffer.  This will be
 *                          @ref PicselScreenFormat_b5g6r5.
 *                          Picsel provides utility functions,
 *                          e.g. Picsel_PixelBlock_blend_b5g6r5(),
 *                          to help with blend the data in @c buffer
 *                          with the device screen, if it's buffer is
 *                          directly accessible.
 * @param[in] width         Width of @c buffer in pixels.  If the Picsel
 *                          library has been configured to start in full
 *                          screen mode this will be @c physicalScreenWidth,
 *                          otherwise it will be @c picselScreenWidth, as set
 *                          by AlienScreen_getConfiguration(), or a
 *                          screen resize or rotation. See
 *                          @ref TgvRotating_And_Resizing.
 * @param[in] height        Height of @c buffer in pixels. If the Picsel
 *                          library has been configured to start in full
 *                          screen mode this will be @c physicalScreenHeight,
 *                          otherwise it will be @c picselScreenHeight, as
 *                          set by AlienScreen_getConfiguration(),  or a
 *                          screen resize or rotation. See
 *                          @ref TgvRotating_And_Resizing.
 * @param[in] widthBytes    Width of @c buffer in bytes.
 * @param[in] alphaBuffer   Buffer containing the mask
 * @param[in] alphaWidthBytes Width of @c alphaBuffer in bytes
 * @param[in] updateX       X offset into @c buffer of changed area, in
 *                          pixels.
 * @param[in] updateY       Y offset into @c buffer of changed area, in
 *                          pixels.
 * @param[in] updateWidth   Width of changed area in pixels.
 * @param[in] updateHeight  Height of changed area in pixels.
 * @param[in] xTopLeft      Typically 0. If the Picsel library is using less
 *                          than the full screen,
 *                          then @c xTopLeft is X co-ordinate of the top left
 *                          of the application's display area, in pixels.
 * @param[in] yTopLeft      Typically 0. If the Picsel library is using less
 *                          than the full screen, then @c yTopLeft is the
 *                          Y co-ordinate of the top left of the
 *                          application's display area, in pixels.
 *
 * @product None.
 *
 * @implement Implementation required only if
 *            PicselConfig_useIrregularBoundaryMode() is called.
 *
 * @see  AlienScreen_update()
 */
void AlienScreen_updateWithMask(Alien_Context *alienContext,
                        void               *buffer,
                        PicselScreenFormat  format,
                        unsigned int        width,
                        unsigned int        height,
                        unsigned int        widthBytes,
                        void               *alphaBuffer,
                        unsigned int        alphaWidthBytes,
                        unsigned int        updateX,
                        unsigned int        updateY,
                        unsigned int        updateWidth,
                        unsigned int        updateHeight,
                        unsigned int        xTopLeft,
                        unsigned int        yTopLeft);

/**
 * Provide details of a device's display to the Picsel library.
 *
 * The Alien application should fill the requested values into the config
 * struct with information describing the screen available to the Picsel
 * library.
 *
 * This function will be called by the Picsel library during start up, see
 * @ref TgvDeveloping_App_Flow.
 *
 * @product Must be implemented to support every Picsel product.
 *
 * @param[in]  alienContext         See PicselApp_start().
 * @param[out] config               See @ref AlienScreenConfiguration
 */
void AlienScreen_getConfiguration(Alien_Context            *alienContext,
                                  AlienScreenConfiguration *config);

/**
 *
 * Inform the Alien application of the displayed page and the total number
 * of pages loaded so far in current document.
 *
 * This will be called by the Picsel library under each of the following
 * circumstances:
 *
 * 1. When number of the page being displayed changes,
 *    for example the user scrolls to the next page. @n
 * 2. When the total number of pages in the current document changes,
 *    for example while it is being loaded.
 *
 * This will enable the Alien application to display a "page i/n" banner
 * on screen, outside of the area used by the Picsel library.
 *
 * @param[in] alienContext       See PicselApp_start().
 * @param[in] currentPage        The page currently being displayed
 *                               (the first page is number 1).
 * @param[in] numPages           The total number of pages in the current
 *                               document.
 *
 *
 * @product Should be implemented to support Picsel Fileviewer products.
 */
void AlienScreen_pagesChanged(Alien_Context *alienContext,
                              int            currentPage,
                              int            numPages);

/**
 * Update the scale factor to be applied to the device's screen.
 *
 * Setting the scale factor to a value >1 provides reduced memory usage in
 * the application, by allowing the Picsel application to render at a
 * smaller screen size and and scale to the physical screen at the final
 * output stage.
 * e.g. An application may have to run on a device with a physical screen
 * size of WVGA (480 x 800). By setting the output scale factor to 2 the
 * Picsel application renders at WQVGA (240 x 400). A WVGA screen buffer
 * uses 768kB memory whereas a WQVGA screen buffer uses 192K, which is a
 * significant saving per screen buffer, and also reduces memory
 * fragmentation issues.
 * It must be noted that a scale factor >1 reduces the display quality,
 * but on devices with a high pixel density the reduction in display quality
 * can be small and the reduced memory usage is justified.
 *
 * The alien screen handling may or may not utilise the scale factor. If the
 * scale factor is not used the alien screen handling will render at the
 * physical screen size. If the scale factor is used the alien
 * implementation of AlienScreen_update() must handle the scale factor to
 * scale the display rendering appropriately.
 *
 * This function will be called by the Picsel library to set the scale
 * factor to a new value. If the scale factor is not used or there is no
 * need for the application to update the scale factor the alien must
 * implement a function stub.
 *
 * @post Subsequent display updates will be scaled according to the scale
 *       factor provided.
 *
 * @param[in] alienContext      See PicselApp_start().
 * @param[in] screenScaleFactor The new scale factor to be applied to the
 *                              screen.
 *
 * @product Must be implemented to support Picsel CUI DCS products.
 */
void AlienScreen_setScaleFactor(Alien_Context *alienContext,
                                unsigned int screenScaleFactor);

/**
 * @}
 */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* !ALIEN_SCREEN_H */
