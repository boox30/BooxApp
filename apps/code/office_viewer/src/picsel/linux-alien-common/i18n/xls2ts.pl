#!/usr/bin/perl
###
## Generic Linux Alien implementation
##
## This script generates a set of .ts language files from the supplied
## spreadsheet.
##
## Only the first worksheet of the spreadsheet will be parsed.  The first
## row should be the column headings:
##  Context, Resource ID, <language>, <language>, <language>, ..., Description
##
## With each additional row containing a single resource string and it's
## translations.
##
## example:
##  Context | Resource ID    | en-gb       | fr-fr                 | Description
##  Test    | RES_HELLOWORLD | Hello world | Bonjour tout le monde | Test hello string
##  Test    | RES_GOODBYE    | Goodbye     | Au revoir             | Test goodbye string
##
## Usage:
##  xls2ts.pl <excel file>
##
##
## Copyright (C) Picsel, 2009. All Rights Reserved.
##
## @author Picsel Technologies Ltd
##
## $Id: xls2ts.pl,v 1.1 2009/09/25 09:41:22 neilk Exp $
###

use strict;
use Spreadsheet::ParseExcel;
use Encode;

# Offset to the first language column
use constant FIRST_LANG_COL_OFFSET => 2;

#
# Get a string from a cell and convert it to perl string format
#
# Params
#   cell    : Spreadsheet Cell type
#
# Returns   The cell's string data
#
sub getStringFromCell
{
    my ($cell) = @_;

    if (!defined $cell)
    {
        die "Invalid cell";
    }

    my $data = $cell->{Val};
    my $cellformat = $cell->{Code};

    if (!defined $cellformat)
    {
        # Need to convert from iso-8859-1 to perl string format
        return decode("iso-8859-1", $data);
    }
    elsif ($cellformat eq "ucs2")
    {
        # Need to convert from UCS2 to perl string format
        return decode("ucs2", $data);
    }
    else
    {
        # Unsupported format
        die "Unsupported excel cell format: ",$cellformat,"\n";
    }
}

my ( $lang, $OUT, %outHandles );
my ( $inContext, $context, $source, @translations, $in );

my $inputFile = shift;
die "usage: $0 input.xls\n" unless $inputFile;
my $outputFile = $inputFile;
$outputFile =~ s/\.xls.*$//;

# Open the spreadsheet
my $excel               = new Spreadsheet::ParseExcel;
my $workbook            = $excel->Parse("$inputFile") || die "Failed to open file $inputFile: $!";
my $worksheet           = $workbook->{Worksheet}[0];

if (!defined $worksheet)
{
    die "Failed to retrieve the first worksheet";
}

my ($row_min, $row_max) = $worksheet->RowRange();
my ($col_min, $col_max) = $worksheet->ColRange();
my $col                 = $row_min;
my $row                 = $col_min;
my @langs               = ();

# The first row contains the languages
for ($col = $col_min + FIRST_LANG_COL_OFFSET; $col <= $col_max; $col++)
{
    my $celldata = getStringFromCell($worksheet->{Cells}[$row_min][$col]);

    last if ($celldata =~ /^Description/);
    print "Found language: ",$celldata, "\n";
    push @langs, $celldata;
}

if ($col > $col_max)
{
    die "No \"Description\" column found.  Bad spreadsheet format.";
}

# Initialise the language files
foreach $lang ( @langs )
{
   $lang =~ s/^"//;
   $lang =~ s/"$//;

   my $name="$outputFile-$lang.ts";
   open(my $OUT,">:utf8", $name) || die "Failed to write $name: $!";
   $outHandles{$lang} = $OUT;

   print $OUT "<!-- auto-generated by $0 from $inputFile on ", scalar localtime time, " -->\n\n";
   print $OUT "<!-- Copyright (C) Picsel, 2007. All Rights Reserved. -->\n\n";
   print $OUT '<!-- @author Picsel Technologies Ltd -->', "\n\n";
   print $OUT '<!-- $'.'Id$ -->', "\n\n";
   print $OUT "<!DOCTYPE TS><TS>\n";
}

# Parse each resource string
$inContext = "";
for ($row = $row_min + 1; $row <= $row_max; $row++)
{

    # If the first cell in the row isn't valid, then we've run out of rows
    my $contextCell = $worksheet->{Cells}[$row][$col_min];
    last if( !defined($contextCell) );

    my $context    = getStringFromCell($contextCell);
    my $resourceId = getStringFromCell($worksheet->{Cells}[$row][$col_min + 1]);

    # we only want RES_ lines
    last if( !defined $resourceId || $resourceId !~ /RES_/ );

    $col = $col_min + FIRST_LANG_COL_OFFSET;
    foreach $lang ( @langs )
    {
        $OUT = $outHandles{$lang};

        my $translation = getStringFromCell($worksheet->Cell($row, $col));

        # contents of the About dialog are in HTML, keep ampersands intact
        if ($resourceId !~ /^RES_ABOUT_PART/)
        {
            $translation =~ s/&/&amp;/;
        }

        if ( $inContext ne $context )
        {
            print $OUT "</context>\n" if ( $inContext );
            print $OUT "<context>\n";
            print $OUT "    <name>$context</name>\n";
        }

        print $OUT "    <message>\n";
        print $OUT "        <source>$resourceId</source>\n";
        print $OUT "        <translation>$translation</translation>\n";
        print $OUT "    </message>\n";

        # Next language
        $col++;
    }
    $inContext=$context;
}

# Close all the language files
foreach $lang ( @langs )
{
    $OUT = $outHandles{$lang};

    print $OUT "</context>\n";
    print $OUT "</TS>\n";
}
